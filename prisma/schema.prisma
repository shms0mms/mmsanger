// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumStatus {
  online
  offline
}

model User {
  id Int @id @default(autoincrement())

  password String

  firstName String

  secondName String

  email String @unique

  username String @unique

  description String? @default("")

  emailConfirmed Boolean @default(false)

  imageURL String? @default("")

  status    EnumStatus @default(offline)
  chats     Chat[]     @relation("Chats")
  messages  Message[]
  history   History?   @relation("HistoryUser", fields: [historyId], references: [id])
  historyId Int?
  histories History[]  @relation("HistoryUsers")

  @@map("user")
}

model History {
  id     Int    @id @default(autoincrement())
  users  User[] @relation("HistoryUser")
  user   User?  @relation("HistoryUsers", fields: [userId], references: [id], onDelete: Cascade)
  userId Int?

  @@map("history")
}

model Message {
  id Int @id @default(autoincrement())

  message   String
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())

  @@map("message")
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  chatName  String?
  users     User[]    @relation("Chats")
  messages  Message[]

  @@map("chat")
}
